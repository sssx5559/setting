#=============================
# bitcoin-cli
#=============================
# Control
complete -f -c bitcoin-cli -a getinfo -d 'DEPRECATED. Returns an object containing various state info.'
complete -f -c bitcoin-cli -a stop -d 'Bitcoin server stopping'

# Wallet
complete -f -c bitcoin-cli -a getaccount -d 'DEPRECATED. Returns the account associated with the given address.'
complete -c bitcoin-cli -a backupwallet -d 'Safely copies current wallet file to destination, which can be a directory or a path with filename.'
complete -c bitcoin-cli -a importaddress -d 'Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.'
complete -c bitcoin-cli -a importwallet -d 'Imports keys from a wallet dump file (see dumpwallet).'
complete -c bitcoin-cli -a dumpwallet -d 'Dumps all wallet keys in a human-readable format.'
complete -f -c bitcoin-cli -a getaddressesbyaccount -d 'DEPRECATED. Returns the list of addresses for the given account.'
complete -f -c bitcoin-cli -a getbalance -d '"account" minconf include_watchonly'
complete -f -c bitcoin-cli -a getnewaddress -d '"account"'
complete -f -c bitcoin-cli -a getreceivedbyaccount -d 'DEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.'
complete -f -c bitcoin-cli -a getreceivedbyaddress -d 'Returns the total amount received by the given address in transactions with at least minconf confirmations.'
complete -f -c bitcoin-cli -a gettransaction -d 'Get detailed information about in-wallet transaction <txid>'
complete -f -c bitcoin-cli -a getwalletinfo -d 'Returns an object containing various wallet state info.'
complete -f -c bitcoin-cli -a listtransactions -d '"account" count skip include_watchonly'
complete -f -c bitcoin-cli -a listaddressgroupings -d 'lists groups of addresses'
complete -f -c bitcoin-cli -a listunspent -d 'Returns an array of unspent transaction outputs belonging to this wallet.'
complete -f -c bitcoin-cli -a walletpassphrase -d 'Stores the wallet decryption key in memory for 'timeout' seconds.'

# Blockchain
complete -f -c bitcoin-cli -a getblock -d 'getblock "blockhash" ( verbose )'
complete -f -c bitcoin-cli -a getblockchaininfo -d 'Returns an object containing various state info regarding blockchain processing.'
complete -f -c bitcoin-cli -a getblockcount -d 'Returns the number of blocks in the longest blockchain.'
complete -f -c bitcoin-cli -a getblockhash -d 'Returns the header hash of a block at the given height in the local best block chain.'



#=============================
# bx
#=============================
complete -f -c bx -a address-decode -d 'Convert a Bitcoin address to its component parts.'
complete -f -c bx -a address-embed -d 'Create a Bitcoin address with an embedded record of binary data.'
complete -f -c bx -a address-encode -d 'Convert a RIPEMD160 value to a Bitcoin address.'
complete -f -c bx -a address-validate -d 'Validate a Bitcoin address.'
complete -f -c bx -a base16-decode -d 'Convert a Base16 value to binary data.'
complete -f -c bx -a base16-encode -d 'Convert binary data to Base16.'
complete -f -c bx -a base58-decode -d 'Convert a Base58 value to Base16.'
complete -f -c bx -a base58-encode -d 'Convert a Base16 value to Base58.'
complete -f -c bx -a base58check-decode -d 'Convert a Base58Check value to Base16.'
complete -f -c bx -a base58check-encode -d 'Convert a Base16 value to Base58Check.'
complete -f -c bx -a base64-decode -d 'Convert a Base64 value to binary data.'
complete -f -c bx -a base64-encode -d 'Convert binary data to Base64.'
complete -f -c bx -a bitcoin160 -d 'Perform a RIPEMD160 hash of a SHA256 hash of Base16 data.'
complete -f -c bx -a bitcoin256 -d 'Perform a SHA256 hash of a SHA256 hash of Base16 data and then reverse the byte order.'
complete -f -c bx -a btc-to-satoshi -d 'Convert BTC to satoshi.'
complete -f -c bx -a cert-new -d 'Create a private Curve ZMQ certificate for use with a Libbitcoin/Obelisk server.'
complete -f -c bx -a cert-public -d 'Create a derived public Curve ZMQ certificate for use with a Libbitcoin/Obelisk server.'
complete -f -c bx -a ec-add -d 'Calculate the EC function POINT + (SECRET * curve-generator-point).'
complete -f -c bx -a ec-add-secrets -d 'Calculate the EC function (SECRET + SECRET) % curve-order.'
complete -f -c bx -a ec-lock -d 'Make a passphrase-protected EC private key (BIP38) from an EC private key.'
complete -f -c bx -a ec-multiply -d 'Calculate the EC product (POINT * SECRET).'
complete -f -c bx -a ec-multiply-secrets -d 'Calculate the EC function (SECRET * SECRET) % curve-order.'
complete -f -c bx -a ec-new -d 'Create a new EC private key from entropy.'
complete -f -c bx -a ec-to-address -d 'Convert an EC public key to a Bitcoin address.'
complete -f -c bx -a ec-to-public -d 'Derive the EC public key of an EC private key.'
complete -f -c bx -a ec-to-wif -d 'Convert an EC private key to a WIF private key.'
complete -f -c bx -a ec-unlock -d 'Extract the EC private key from a passphrase-protected (BIP38) EC private key.'
complete -f -c bx -a fetch-balance -d 'Get the balance in satoshi of a Bitcoin address.'
complete -f -c bx -a fetch-header -d 'Get the block header from the specified hash or height.'
complete -f -c bx -a fetch-height -d 'Get the last block height.'
complete -f -c bx -a fetch-history -d 'Get list of output points, values, and spends for a Bitcoin address.'
complete -f -c bx -a fetch-public-key -d 'Get the EC public key of the address, if it exists on the blockchain.'
complete -f -c bx -a fetch-stealth -d 'Get metadata on potential payment transactions by stealth prefix.'
complete -f -c bx -a fetch-tx -d 'Get a transaction by its hash.'
complete -f -c bx -a fetch-tx-index -d 'Get the block height and index of a transaction.'
complete -f -c bx -a fetch-utxo -d 'Get enough unspent transaction outputs from a Bitcoin addresses to pay a number of satoshi.'
complete -f -c bx -a hd-new -d 'Create a new HD (BIP32) private key from entropy.'
complete -f -c bx -a hd-private -d 'Derive a child HD (BIP32) private key from another HD private key.'
complete -f -c bx -a hd-public -d 'Derive a child HD (BIP32) public key from another HD public or private key.'
complete -f -c bx -a hd-to-address -d 'Convert a HD (BIP32) public or private key to a Bitcoin address.'
complete -f -c bx -a hd-to-ec -d 'Convert a HD (BIP32) public or private key to the equivalent EC public or private key.'
complete -f -c bx -a hd-to-public -d 'Derive the HD (BIP32) public key of a HD private key.'
complete -f -c bx -a hd-to-wif -d 'Convert a HD (BIP32) private key to a WIF private key.'
complete -f -c bx -a help -d 'Get the list of commands.'
complete -f -c bx -a input-set -d 'Assign a script to an existing transaction input.'
complete -f -c bx -a input-sign -d 'Create an endorsement for a transaction input.'
complete -f -c bx -a input-validate -d 'Validate a transaction input endorsement.'
complete -f -c bx -a message-sign -d 'Create a message signature.'
complete -f -c bx -a message-validate -d 'Validate a message signature.'
complete -f -c bx -a mnemonic-new -d 'Create a mnemonic seed (BIP39) from entropy.'
complete -f -c bx -a mnemonic-to-seed -d 'Convert a mnemonic seed (BIP39) to its numeric representation.'
complete -f -c bx -a qrcode -d 'Create a QR code image file for a Bitcoin address.'
complete -f -c bx -a ripemd160 -d 'Perform a RIPEMD160 hash of Base16 data.'
complete -f -c bx -a satoshi-to-btc -d 'Convert satoshi to BTC.'
complete -f -c bx -a script-decode -d 'Decode a script to plain text tokens.'
complete -f -c bx -a script-encode -d 'Base16 encode a plain text script.'
complete -f -c bx -a script-to-address -d 'Create a BIP16 pay-to-script-hash address from a script.'
complete -f -c bx -a seed -d 'Generate a pseudorandom seed.'
complete -f -c bx -a send-tx -d 'Broadcast a transaction to the Bitcoin network via an Libbitcoin/Obelisk server.'
complete -f -c bx -a send-tx-node -d 'Broadcast a transaction to the Bitcoin network via a single Bitcoinnetwork node.'
complete -f -c bx -a send-tx-p2p -d 'Broadcast a transaction to the Bitcoin network via the Bitcoin peer-to-peer network.'
complete -f -c bx -a settings -d 'Display the loaded configuration settings.'
complete -f -c bx -a sha160 -d 'Perform a SHA160 (also known as SHA-1) hash of Base16 data.'
complete -f -c bx -a sha256 -d 'Perform a SHA256 hash of Base16 data.'
complete -f -c bx -a sha512 -d 'Perform a SHA512 hash of Base16 data.'
complete -f -c bx -a stealth-decode -d 'Decode a stealth address.'
complete -f -c bx -a stealth-encode -d 'Encode a stealth payment address.'
complete -f -c bx -a stealth-public -d 'Derive the stealth public key necessary to address and to identify a stealth payment.'
complete -f -c bx -a stealth-secret -d 'Derive the stealth private key necessary to spend a stealth payment.'
complete -f -c bx -a stealth-shared -d 'Derive the secret shared between an ephemeral key pair and a scan key pair.'
complete -f -c bx -a tx-decode -d 'Decode a Base16 transaction.'
complete -f -c bx -a tx-encode -d 'Encode an unsigned transaction as Base16.'
complete -f -c bx -a tx-sign -d 'Sign a set of transactions using a private key.'
complete -f -c bx -a uri-decode -d 'Validate and decompose a Bitcoin URI into its parts.'
complete -f -c bx -a uri-encode -d 'Compose a Bitcoin URI from specified parts.'
complete -f -c bx -a validate-tx -d 'Determine if a transaction is valid for submission to the blockchain.'
complete -f -c bx -a watch-address -d 'Watch the network for transactions in which an address participates.'
complete -f -c bx -a watch-tx -d 'Watch the network for a transaction by hash.'
complete -f -c bx -a wif-to-ec -d 'Convert a WIF private key to an EC private key.'
complete -f -c bx -a wif-to-public -d 'Derive the EC public key from a WIF private key.'
complete -f -c bx -a wrap-decode -d 'Validate the checksum of a Base16 data and recover its version byteand data.'
complete -f -c bx -a wrap-encode -d 'Add a version byte and checksum to Base16 data.'
